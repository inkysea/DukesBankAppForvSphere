'@type': "SoftwareComponentType"
createdDate: "2016-03-13T22:57:10.730Z"
lastUpdated: "2016-03-14T02:41:01.508Z"
id: "Software.JBossAppServer"
name: "JBoss Application Server"
description: "Clusterable JBoss 5.1 on Linux JBoss Application Server is the open\
  \ source implementation of the Java EE suite of services. It comprises a set of\
  \ offerings for enterprise customers who are looking for preconfigured profiles\
  \ of JBoss Enterprise Middleware components that have been tested and certified\
  \ together to provide an integrated experience. It's easy-to-use server architecture\
  \ and high flexibility makes JBoss the ideal choice for users just starting out\
  \ with J2EE, as well as senior architects looking for a customizable middleware\
  \ platform."
publishStatus: "PUBLISHED"
publishStatusName: "Published"
schema:
  fields:
  - id: "JBOSS_NAME_AND_VERSION"
    label: "JBOSS_NAME_AND_VERSION"
    description: "JBoss name and version"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: "jboss-5.1.0.GA"
    isMultiValued: false
  - id: "Install_Path"
    label: "Install_Path"
    description: "Install path for JBoss, for AppConsole to match up the services\
      \ in Monitoring Server"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: ""
    isMultiValued: false
  - id: "JAVA_HOME"
    label: "JAVA_HOME"
    description: "The directory in which JRE 1.7 is installed"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: "/opt/vmware-jre"
      - type: "mandatory"
        value:
          type: "constant"
          value:
            type: "boolean"
            value: true
    isMultiValued: false
  - id: "app_content_server_port"
    label: "app_content_server_port"
    description: "Artifact server port for wget."
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: "5480"
      - type: "mandatory"
        value:
          type: "constant"
          value:
            type: "boolean"
            value: true
    isMultiValued: false
  - id: "JBOSS_JMX_USER"
    label: "JBOSS_JMX_USER"
    description: "JBoss JMX user name"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: "admin"
    isMultiValued: false
  - id: "cheetah_tgz_url"
    label: "cheetah_tgz_url"
    description: "URL to download Cheetah tarball file"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: "https://$app_content_server_ip:$app_content_server_port/artifacts/software/jboss/cheetah-2.4.4.tar.gz"
    isMultiValued: false
  - id: "zip_url"
    label: "zip_url"
    description: "URL to download JBoss package"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: "https://$app_content_server_ip:$app_content_server_port/artifacts/software/jboss/jboss-5.1.0.GA.zip"
    isMultiValued: false
  - id: "jboss_install_script"
    label: "jboss_install_script"
    description: "URL to download JBoss installation script"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: "https://$app_content_server_ip:$app_content_server_port/artifacts/software/jboss/install.sh"
    isMultiValued: false
  - id: "JBOSS_BOOTRC_TEMPLATE"
    label: "JBOSS_BOOTRC_TEMPLATE"
    description: "URL to download JBoss application server bootup script"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: "https://$app_content_server_ip:$app_content_server_port/artifacts/software/jboss/boot.rc.tmpl"
    isMultiValued: false
  - id: "JBOSS_JMX_PWD"
    label: "JBOSS_JMX_PWD"
    description: "JBoss JMX password"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "secureString"
            value: ""
      - type: "encrypted"
        value:
          type: "constant"
          value:
            type: "boolean"
            value: true
    isMultiValued: false
  - id: "app_content_server_ip"
    label: "app_content_server_ip"
    description: "Artifact server ip for wget."
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: ""
      - type: "mandatory"
        value:
          type: "constant"
          value:
            type: "boolean"
            value: true
    isMultiValued: false
  - id: "cheetah_install_script"
    label: "cheetah_install_script"
    description: "URL to download the Cheetah installation script"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: "https://$app_content_server_ip:$app_content_server_port/artifacts/software/jboss/cheetah_install.sh"
    isMultiValued: false
  - id: "jboss_configure_script"
    label: "jboss_configure_script"
    description: "URL to download JBoss configuration script"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: "https://$app_content_server_ip:$app_content_server_port/artifacts/software/jboss/configure.sh"
    isMultiValued: false
  - id: "JBOSS_INSTANCE_NAME"
    label: "JBOSS_INSTANCE_NAME"
    description: "JBoss instance name"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: "default"
    isMultiValued: false
  - id: "host"
    label: ""
    description: ""
    dataType:
      type: "ref"
      componentTypeId: "com.vmware.csp.iaas.blueprint.service"
      classId: "Infrastructure.Machine.Schema"
      label: "Machine"
    state:
      dependencies: []
      facets:
      - type: "visible"
        value:
          type: "constantClause"
          value:
            type: "boolean"
            value: false
      - type: "mandatory"
        value:
          type: "constant"
          value:
            type: "boolean"
            value: true
    isMultiValued: false
  - id: "JVM_ROUTE"
    label: "JVM_ROUTE"
    description: "JVM route"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: "0"
    isMultiValued: false
  - id: "JBOSS_JMX_CONSOLE_USERS_TEMPLATE"
    label: "JBOSS_JMX_CONSOLE_USERS_TEMPLATE"
    description: "URL to download JBoss JMX console user template"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: "https://$app_content_server_ip:$app_content_server_port/artifacts/software/jboss/jmx-console-users.properties.tmpl"
    isMultiValued: false
  - id: "JBOSS_PORT_NUMBER"
    label: "JBOSS_PORT_NUMBER"
    description: "The JBoss Port Number"
    dataType:
      type: "primitive"
      typeId: "STRING"
    state:
      dependencies: []
      facets:
      - type: "defaultValue"
        value:
          type: "constant"
          value:
            type: "string"
            value: "8080"
      - type: "mandatory"
        value:
          type: "constant"
          value:
            type: "boolean"
            value: true
    isMultiValued: false
containerFieldId: "host"
lifecycleTasks:
- createdDate: "2016-03-13T22:57:10.735Z"
  lastUpdated: "2016-03-14T02:41:01.508Z"
  script:
    scriptContent: "#!/bin/bash\n# Import global conf \nexport ftp_proxy=${ftp_proxy:-$global_ftp_proxy}\n\
      echo \"Setting ftp_proxy to $ftp_proxy\"\n\nexport http_proxy=${http_proxy:-$global_http_proxy}\n\
      echo \"Setting http_proxy to $http_proxy\"\n\nexport https_proxy=${https_proxy:-$global_https_proxy}\n\
      echo \"Setting https_proxy to $https_proxy\"\n\n\n#\n# Determine operating system\
      \ and version \n#\nexport OS=\nexport OS_VERSION=\n\nif [ -f /etc/redhat-release\
      \ ]; then\n    # For CentOS the result will be 'CentOS'\n    # For RHEL the\
      \ result will be 'Red'\n    OS=$(cat /etc/redhat-release | awk {'print $1'})\n\
      \n    if [ -n $OS ] && [ $OS = 'CentOS' ]; then\n        OS_VERSION=$(cat /etc/redhat-release\
      \ | awk '{print $3}')\n    else\n        # RHEL\n        OS_VERSION=$(cat /etc/redhat-release\
      \ | awk '{print $7}')\n    fi\n\nelif [ -f /etc/SuSE-release ]; then\n    OS=SuSE\n\
      \n    MAJOR_VERSION=$(cat /etc/SuSE-release | grep VERSION | awk '{print $3}')\n\
      \    PATCHLEVEL=$(cat /etc/SuSE-release | grep PATCHLEVEL | awk '{print $3}')\n\
      \n    OS_VERSION=\"$MAJOR_VERSION.$PATCHLEVEL\"\n\nelif [ -f /usr/bin/lsb_release\
      \ ]; then\n    # For Ubuntu the result is 'Ubuntu'\n    OS=$(lsb_release -a\
      \ 2> /dev/null | grep Distributor | awk '{print $3}')\n    OS_VERSION=$(lsb_release\
      \ -a 2> /dev/null | grep Release | awk '{print $2}')\n\nfi\n\nmkdir /tmp/content\n\
      eval \"wget -q -O /tmp/content/cheetah_install.sh $cheetah_install_script\"\
      \ --no-check-certificate\ncheetah_install_script=/tmp/content/cheetah_install.sh\n\
      chmod 777 $cheetah_install_script\n\neval \"wget -q -O /tmp/content/jboss_install.sh\
      \ $jboss_install_script\" --no-check-certificate\njboss_install_script=/tmp/content/jboss_install.sh\n\
      chmod 777 $jboss_install_script\n\neval \"wget -q -O /tmp/content/jboss_jmx_console_users_template.tmpl\
      \ $JBOSS_JMX_CONSOLE_USERS_TEMPLATE\" --no-check-certificate\nJBOSS_JMX_CONSOLE_USERS_TEMPLATE=/tmp/content/jboss_jmx_console_users_template.tmpl\n\
      chmod 777 $JBOSS_JMX_CONSOLE_USERS_TEMPLATE\n\neval \"wget -q -O /tmp/content/cheetah-2.4.4.tar.gz\
      \ $cheetah_tgz_url\" --no-check-certificate\ncheetah_tgz_url=/tmp/content/cheetah-2.4.4.tar.gz\n\
      chmod 777 $cheetah_tgz_url\n\neval \"wget -q -O /tmp/content/jboss_configure.sh\
      \ $jboss_configure_script\" --no-check-certificate\njboss_configure_script=/tmp/content/jboss_configure.sh\n\
      chmod 777 $jboss_configure_script\n\neval \"wget -q -O /tmp/content/jboss_boot.rc.tmpl\
      \ $JBOSS_BOOTRC_TEMPLATE\" --no-check-certificate\nJBOSS_BOOTRC_TEMPLATE=/tmp/content/jboss_boot.rc.tmpl\n\
      chmod 777 $JBOSS_BOOTRC_TEMPLATE\n\neval \"wget -q -O /tmp/content/jboss_zip.GA.zip\
      \ $zip_url\" --no-check-certificate\nzip_url=/tmp/content/jboss_zip.GA.zip\n\
      chmod 777 $zip_url\n\nexport PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$JAVA_HOME/bin\n\
      set -e\n\n# Set Install Path to the default install path (For monitoring)\n\
      Install_Path=/home/jboss/$JBOSS_NAME_AND_VERSION/jboss-as/server/$JBOSS_INSTANCE_NAME\n\
      echo Install_Path is set to $Install_Path, please modify this script if the\
      \ install path is not correct.\n\n#Setup JBoss\n\ncd /tmp\nmv $cheetah_tgz_url\
      \ .\nfilename=`basename $cheetah_tgz_url`\nCHEETAH_TGZ_PATH=/tmp/$filename\n\
      mv $zip_url .\nfilename=`basename $zip_url`\nJBOSS_ZIP_PATH=/tmp/$filename\n\
      echo \"PATH: $PATH\" > properties.txt\necho \"cheetah_install_script: $cheetah_install_script\
      \ \" >> properties.txt\necho \"jboss_install_script: $jboss_install_script\"\
      \ >> properties.txt\necho \"CHEETAH_TGZ_PATH: $CHEETAH_TGZ_PATH\" >> properties.txt\n\
      echo \"JBOSS_ZIP_PATH: $JBOSS_ZIP_PATH\" >> properties.txt\necho \"JBOSS_NAME_AND_VERSION:\
      \ $JBOSS_NAME_AND_VERSION\"  >> properties.txt\necho \"JBOSS_INSTANCE_NAME:\
      \ $JBOSS_INSTANCE_NAME\"  >> properties.txt\necho \"JBOSS_JMX_USER: $JBOSS_JMX_USER\"\
      \  >> properties.txt\necho \"JBOSS_JMX_PWD: $JBOSS_JMX_PWD\"  >> properties.txt\n\
      echo \"JBOSS_BOOTRC_TEMPLATE: $JBOSS_BOOTRC_TEMPLATE\" >> properties.txt\necho\
      \ \"JBOSS_JMX_CONSOLE_USERS_TEMPLATE: $JBOSS_JMX_CONSOLE_USERS_TEMPLATE\"  >>\
      \ properties.txt\n. $cheetah_install_script 2>&1 | tee /tmp/cheetah_output\n\
      . $jboss_install_script"
    isRebootAfter: false
    scriptTypeId: "Bash"
  taskDescriptorRef:
    id: "INSTALL"
    label: "Install"
- createdDate: "2016-03-13T22:57:10.734Z"
  lastUpdated: "2016-03-14T02:41:01.508Z"
  script:
    scriptContent: "#!/bin/bash\n# Import global conf\nexport ftp_proxy=${ftp_proxy:-$global_ftp_proxy}\n\
      echo \"Setting ftp_proxy to $ftp_proxy\"\n\nexport http_proxy=${http_proxy:-$global_http_proxy}\n\
      echo \"Setting http_proxy to $http_proxy\"\n\nexport https_proxy=${https_proxy:-$global_https_proxy}\n\
      echo \"Setting https_proxy to $https_proxy\"\n\n\n#\n# Determine operating system\
      \ and version \n#\nexport OS=\nexport OS_VERSION=\n\nif [ -f /etc/redhat-release\
      \ ]; then\n    # For CentOS the result will be 'CentOS'\n    # For RHEL the\
      \ result will be 'Red'\n    OS=$(cat /etc/redhat-release | awk {'print $1'})\n\
      \n    if [ -n $OS ] && [ $OS = 'CentOS' ]; then\n        OS_VERSION=$(cat /etc/redhat-release\
      \ | awk '{print $3}')\n    else\n        # RHEL\n        OS_VERSION=$(cat /etc/redhat-release\
      \ | awk '{print $7}')\n    fi\n\nelif [ -f /etc/SuSE-release ]; then\n    OS=SuSE\n\
      \n    MAJOR_VERSION=$(cat /etc/SuSE-release | grep VERSION | awk '{print $3}')\n\
      \    PATCHLEVEL=$(cat /etc/SuSE-release | grep PATCHLEVEL | awk '{print $3}')\n\
      \n    OS_VERSION=\"$MAJOR_VERSION.$PATCHLEVEL\"\n\nelif [ -f /usr/bin/lsb_release\
      \ ]; then\n    # For Ubuntu the result is 'Ubuntu'\n    OS=$(lsb_release -a\
      \ 2> /dev/null | grep Distributor | awk '{print $3}')\n    OS_VERSION=$(lsb_release\
      \ -a 2> /dev/null | grep Release | awk '{print $2}')\n\nfi\n\nexport PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$JAVA_HOME/bin\n\
      set -e\n\nservice jboss start\nsleep 120\nTEST=`service jboss status`\nif [[\
      \ {$TEST} = *running* ]]; then\n\techo \"Jboss service is running\"\nelse \n\
      \techo \"Jboss service is not running. Please check the logs.\"\n\texit 1\n\
      fi\n                \n            "
    isRebootAfter: false
    scriptTypeId: "Bash"
  taskDescriptorRef:
    id: "START"
    label: "Start"
- createdDate: "2016-03-13T22:57:10.732Z"
  lastUpdated: "2016-03-14T02:41:01.508Z"
  script:
    scriptContent: "#!/bin/bash\n# Import global conf\nexport ftp_proxy=${ftp_proxy:-$global_ftp_proxy}\n\
      echo \"Setting ftp_proxy to $ftp_proxy\"\n\nexport http_proxy=${http_proxy:-$global_http_proxy}\n\
      echo \"Setting http_proxy to $http_proxy\"\n\nexport https_proxy=${https_proxy:-$global_https_proxy}\n\
      echo \"Setting https_proxy to $https_proxy\"\n\n\n#\n# Determine operating system\
      \ and version \n#\nexport OS=\nexport OS_VERSION=\n\nif [ -f /etc/redhat-release\
      \ ]; then\n    # For CentOS the result will be 'CentOS'\n    # For RHEL the\
      \ result will be 'Red'\n    OS=$(cat /etc/redhat-release | awk {'print $1'})\n\
      \n    if [ -n $OS ] && [ $OS = 'CentOS' ]; then\n        OS_VERSION=$(cat /etc/redhat-release\
      \ | awk '{print $3}')\n    else\n        # RHEL\n        OS_VERSION=$(cat /etc/redhat-release\
      \ | awk '{print $7}')\n    fi\n\nelif [ -f /etc/SuSE-release ]; then\n    OS=SuSE\n\
      \n    MAJOR_VERSION=$(cat /etc/SuSE-release | grep VERSION | awk '{print $3}')\n\
      \    PATCHLEVEL=$(cat /etc/SuSE-release | grep PATCHLEVEL | awk '{print $3}')\n\
      \n    OS_VERSION=\"$MAJOR_VERSION.$PATCHLEVEL\"\n\nelif [ -f /usr/bin/lsb_release\
      \ ]; then\n    # For Ubuntu the result is 'Ubuntu'\n    OS=$(lsb_release -a\
      \ 2> /dev/null | grep Distributor | awk '{print $3}')\n    OS_VERSION=$(lsb_release\
      \ -a 2> /dev/null | grep Release | awk '{print $2}')\n\nfi\n\njboss_configure_script=/tmp/content/jboss_configure.sh\n\
      \nexport PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$JAVA_HOME/bin\n\
      set -e\n\n. $jboss_configure_script 2>&1 | tee /tmp/jboss_cfg_output\nexport\
      \ profileconfigFile=\"/home/jboss/$JBOSS_NAME_AND_VERSION/jboss-as/server/$JBOSS_INSTANCE_NAME/conf/bootstrap/profile.xml\"\
      \nsed -i \"s/<constructor><parameter><inject bean=\\\"BootstrapProfileFactory\\\
      \" property=\\\"attachmentStoreRoot\\\" \\/><\\/parameter><\\/constructor>/<constructor><parameter\
      \ class=\\\"java.io.File\\\"><inject bean=\\\"BootstrapProfileFactory\\\" property=\\\
      \"attachmentStoreRoot\\\" \\/><\\/parameter><\\/constructor>/g\" $profileconfigFile\n\
      \n                \n            "
    isRebootAfter: false
    scriptTypeId: "Bash"
  taskDescriptorRef:
    id: "CONFIGURE"
    label: "Configure"
